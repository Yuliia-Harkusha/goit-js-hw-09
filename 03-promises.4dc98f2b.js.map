{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,QAASC,SAASC,cAAc,SAChCC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAuBjC,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GAChCC,EAAgB,CAAEJ,WAAUJ,SAElC,OAAO,IAAIS,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,OAAIP,EACKK,EAAQF,GAERG,EAAOH,E,GAEfR,E,IA/BPJ,EAAKC,QAAQgB,iBAAiB,UAE9B,SAAoBC,GAClBA,EAAEC,iBAKF,IAJA,IAAIC,EAAQC,OAAOrB,EAAKI,MAAMkB,OACxBjB,EAAOgB,OAAOrB,EAAKK,KAAKiB,OACxBhB,EAASe,OAAOrB,EAAKM,OAAOgB,OAEzBC,EAAW,EAAGA,GAAYjB,EAAQiB,GAAY,EAErDhB,EAAcgB,EADdH,GAASf,GAENmB,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MACfN,EAAA4B,OAAOC,QAAQ,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANxB,EAAM,MAAK,CAAEyB,SAAS,G,IAEhFC,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MAChBN,EAAA4B,OAAOK,QAAQ,sBAAqCH,OAAfpB,EAAS,QAAYoB,OAANxB,EAAM,MAAK,CAAEyB,SAAS,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formRef: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.formRef.addEventListener('submit', formSubmit);\n\nfunction formSubmit(e) {\n  e.preventDefault();\n  let delay = Number(refs.delay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    delay += step;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { useIcon: false });\n      })\n      .catch(({ position, delay }) => { \n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { useIcon: false });\n      });\n  };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const objectPromise = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        return resolve(objectPromise);\n      } else {\n        return reject(objectPromise);\n      };\n    }, delay)\n  });\n  };\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","formRef","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","objectPromise","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","position1","then","param","Notify","success","concat","useIcon","catch","failure"],"version":3,"file":"03-promises.4dc98f2b.js.map"}